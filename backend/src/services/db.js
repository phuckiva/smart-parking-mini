// Di chuy·ªÉn file db.js g·ªëc v√†o services v√† c·∫£i ti·∫øn
require('dotenv').config();

const { Client } = require('pg');

// T·∫°o m·ªôt pool connection ƒë·ªÉ t√°i s·ª≠ d·ª•ng
class DatabaseService {
    constructor() {
        this.client = new Client({
            connectionString: process.env.database_url,
            ssl: {
                rejectUnauthorized: false
            }
        });
        this.isConnected = false;
    }

    async connect() {
        try {
            if (!this.isConnected) {
                await this.client.connect();
                this.isConnected = true;
                console.log('‚úÖ K·∫øt n·ªëi database th√†nh c√¥ng!');
            }
            return this.client;
        } catch (error) {
            console.error('‚ùå L·ªói k·∫øt n·ªëi database:', error.message);
            throw error;
        }
    }

    async disconnect() {
        try {
            if (this.isConnected) {
                await this.client.end();
                this.isConnected = false;
                console.log('üîö ƒê√£ ƒë√≥ng k·∫øt n·ªëi database');
            }
        } catch (error) {
            console.error('‚ö†Ô∏è L·ªói khi ƒë√≥ng k·∫øt n·ªëi:', error.message);
        }
    }

    async query(text, params) {
        try {
            await this.connect();
            const result = await this.client.query(text, params);
            return result;
        } catch (error) {
            console.error('‚ùå L·ªói th·ª±c thi query:', error.message);
            throw error;
        }
    }
}

// T·∫°o instance duy nh·∫•t (Singleton pattern)
const db = new DatabaseService();

module.exports = db;