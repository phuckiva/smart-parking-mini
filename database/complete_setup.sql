-- =================================================================
-- FILE HOÀN CHỈNH TẠO DATABASE CHO DỰ ÁN SMART PARKING
-- Sao chép và chạy toàn bộ script này trong SQL Editor của Supabase.
-- =================================================================

-- ========= Bước 1: TẠO CÁC BẢNG CHÍNH =========

-- Tạo kiểu dữ liệu ENUM cho trạng thái chỗ đỗ để đảm bảo tính nhất quán.
CREATE TYPE public.parking_status AS ENUM ('available', 'occupied');

-- Bảng ROLES: Lưu các vai trò trong hệ thống (ADMIN, DRIVER).
CREATE TABLE public.roles (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    role_name TEXT NOT NULL UNIQUE
);
COMMENT ON TABLE public.roles IS 'Lưu trữ các vai trò người dùng.';

-- Bảng USERS: Lưu thông tin người dùng, bao gồm cả admin và tài xế.
CREATE TABLE public.users (
    id UUID NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
    full_name TEXT,
    email TEXT NOT NULL UNIQUE,
    password_hash TEXT NOT NULL,
    license_plate TEXT UNIQUE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);
COMMENT ON TABLE public.users IS 'Lưu trữ thông tin người dùng (admin và tài xế).';

-- Bảng PARKING_SLOTS: Quản lý trạng thái của từng chỗ đỗ xe.
CREATE TABLE public.parking_slots (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    slot_name TEXT NOT NULL UNIQUE,
    status public.parking_status NOT NULL DEFAULT 'available',
    updated_at TIMESTAMPTZ,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);
COMMENT ON TABLE public.parking_slots IS 'Quản lý thông tin và trạng thái các chỗ đỗ xe.';

-- ========= Bước 2: TẠO CÁC BẢNG KẾT NỐI (QUAN HỆ) =========

-- Bảng USER_ROLES: Kết nối người dùng với vai trò (quan hệ nhiều-nhiều).
CREATE TABLE public.user_roles (
    user_id UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
    role_id BIGINT NOT NULL REFERENCES public.roles(id) ON DELETE CASCADE,
    PRIMARY KEY (user_id, role_id)
);
COMMENT ON TABLE public.user_roles IS 'Bảng trung gian gán vai trò cho người dùng.';

-- Bảng PARKING_HISTORY: Ghi lại lịch sử đỗ xe của người dùng.
CREATE TABLE public.parking_history (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    slot_id BIGINT NOT NULL REFERENCES public.parking_slots(id),
    user_id UUID NOT NULL REFERENCES public.users(id),
    check_in_time TIMESTAMPTZ NOT NULL DEFAULT now(),
    check_out_time TIMESTAMPTZ,
    CONSTRAINT check_out_after_check_in CHECK (check_out_time IS NULL OR check_out_time > check_in_time)
);
COMMENT ON TABLE public.parking_history IS 'Lịch sử ra vào của các xe tại các chỗ đỗ.';

-- Bảng PARKING_RESERVATIONS: Quản lý việc đặt chỗ trước của người dùng.
CREATE TABLE public.parking_reservations (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    slot_id BIGINT NOT NULL REFERENCES public.parking_slots(id) ON DELETE CASCADE,
    user_id UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
    start_time TIMESTAMPTZ NOT NULL,
    end_time TIMESTAMPTZ NOT NULL,
    status TEXT NOT NULL DEFAULT 'active',
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    CONSTRAINT check_end_after_start CHECK (end_time > start_time),
    CONSTRAINT parking_reservations_status_check CHECK (status IN ('active', 'cancelled'))
);
COMMENT ON TABLE public.parking_reservations IS 'Quản lý việc đặt chỗ đậu xe trước của người dùng.';

-- ========= Bước 3: TẠO TRIGGER TỰ ĐỘNG =========

-- Function và Trigger để tự động cập nhật cột `updated_at` trong bảng `parking_slots`.
CREATE OR REPLACE FUNCTION public.update_timestamp()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER handle_updated_at
BEFORE UPDATE ON public.parking_slots
FOR EACH ROW
EXECUTE PROCEDURE public.update_timestamp();

-- ========= Bước 4: TẠO INDEX ĐỂ TỐI ƯU HIỆU SUẤT =========

-- Index cho bảng reservations
CREATE INDEX IF NOT EXISTS idx_reservations_slot_time ON public.parking_reservations(slot_id, start_time, end_time);
CREATE INDEX IF NOT EXISTS idx_reservations_user_active ON public.parking_reservations(user_id) WHERE status = 'active';
CREATE INDEX IF NOT EXISTS idx_reservations_time_range ON public.parking_reservations(start_time, end_time) WHERE status = 'active';

-- Index cho bảng parking_history
CREATE INDEX IF NOT EXISTS idx_parking_history_user ON public.parking_history(user_id);
CREATE INDEX IF NOT EXISTS idx_parking_history_slot ON public.parking_history(slot_id);
CREATE INDEX IF NOT EXISTS idx_parking_history_time ON public.parking_history(check_in_time, check_out_time);

-- ========= Bước 5: THÊM DỮ LIỆU MẪU (SEED DATA) =========

-- Thêm 2 vai trò cơ bản.
INSERT INTO public.roles (role_name) VALUES ('ADMIN'), ('DRIVER');

-- Thêm người dùng mẫu với mật khẩu đã hash (bcrypt)
-- admin@smartparking.com / admin123
-- nguyenvana@email.com / 123456
INSERT INTO public.users (full_name, email, password_hash, license_plate) VALUES
('Admin User', 'admin@smartparking.com', '$2b$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewKyNdFzQ7rUeMWW', NULL),
('Nguyen Van A', 'nguyenvana@email.com', '$2b$12$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', '51A-12345'),
('Tran Thi B', 'tranthib@email.com', '$2b$12$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', '29B-67890');

-- Gán vai trò cho người dùng
INSERT INTO public.user_roles (user_id, role_id) VALUES
((SELECT id FROM public.users WHERE email = 'admin@smartparking.com'), (SELECT id FROM public.roles WHERE role_name = 'ADMIN')),
((SELECT id FROM public.users WHERE email = 'nguyenvana@email.com'), (SELECT id FROM public.roles WHERE role_name = 'DRIVER')),
((SELECT id FROM public.users WHERE email = 'tranthib@email.com'), (SELECT id FROM public.roles WHERE role_name = 'DRIVER'));

-- Thêm 10 chỗ đỗ xe.
INSERT INTO public.parking_slots (slot_name, status) VALUES
('A-01', 'occupied'),
('A-02', 'available'),
('A-03', 'available'),
('A-04', 'occupied'),
('A-05', 'available'),
('B-01', 'available'),
('B-02', 'available'),
('B-03', 'occupied'),
('B-04', 'available'),
('B-05', 'available');

-- ========= Bước 6: KÍCH HOẠT BẢO MẬT ROW LEVEL SECURITY (RLS) =========

ALTER TABLE public.roles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.parking_slots ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_roles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.parking_history ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.parking_reservations ENABLE ROW LEVEL SECURITY;

-- Tạo các chính sách (Policy) cơ bản:
CREATE POLICY "Allow public read access" ON public.parking_slots FOR SELECT USING (true);
CREATE POLICY "Allow public read access" ON public.roles FOR SELECT USING (true);

-- Policies cho users
CREATE POLICY "Allow authenticated users to read user data" ON public.users FOR SELECT USING (auth.role() = 'authenticated');
CREATE POLICY "Allow user to update their own data" ON public.users FOR UPDATE USING (auth.uid() = id);

-- Policies cho parking_history
CREATE POLICY "Allow authenticated users to see parking history" ON public.parking_history FOR SELECT USING (auth.role() = 'authenticated');
CREATE POLICY "Allow user to create their own parking history" ON public.parking_history FOR INSERT WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Allow user to update their own parking history" ON public.parking_history FOR UPDATE USING (auth.uid() = user_id);

-- Policies cho parking_reservations
CREATE POLICY "Allow authenticated users to view reservations" ON public.parking_reservations FOR SELECT USING (auth.role() = 'authenticated');
CREATE POLICY "Allow users to create their own reservations" ON public.parking_reservations FOR INSERT WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Allow users to update their own reservations" ON public.parking_reservations FOR UPDATE USING (auth.uid() = user_id);

-- Hoàn tất!
SELECT 'Smart Parking Database setup completed!' as message;