name: Smart Parking CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18.x'
  FLUTTER_VERSION: '3.13.0'

jobs:
  # Backend Code Check
  backend-check:
    name: Backend Code Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install Dependencies
      run: |
        cd backend
        npm ci
    
    - name: Check Code Syntax
      run: |
        cd backend
        node -c server.js
        echo "‚úÖ Backend syntax check passed"
    
    - name: Security Audit
      run: |
        cd backend
        npm audit --audit-level high || echo "‚ö†Ô∏è Security warnings found, please review"

  # Frontend Code Check  
  frontend-check:
    name: Frontend Code Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: webapp/package-lock.json
    
    - name: Install Dependencies
      run: |
        cd webapp
        npm ci
    
    - name: Build Check
      run: |
        cd webapp
        npm run build
        echo "‚úÖ Frontend build successful"
    
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: webapp-build
        path: webapp/dist/
        retention-days: 7

  # Mobile App Check
  mobile-check:
    name: Mobile App Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check Flutter Structure
      run: |
        cd mobileapp
        if [ -f "pubspec.yaml" ]; then
          echo "‚úÖ Flutter project structure found"
        else
          echo "‚ö†Ô∏è Flutter project will be created later"
        fi
    
    - name: Validate README
      run: |
        cd mobileapp
        if [ -f "README.md" ]; then
          echo "‚úÖ Mobile README exists"
        else
          echo "‚ùå Mobile README missing"
        fi

  # Firmware/IoT Check
  firmware-check:
    name: Firmware & IoT Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python for IoT Simulator
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install IoT Simulator Dependencies
      run: |
        cd firmware
        pip install -r requirements.txt
        echo "‚úÖ IoT simulator dependencies installed"
    
    - name: Test IoT Simulator Syntax
      run: |
        cd firmware
        python -m py_compile simulator.py
        python -m py_compile simulator_gui.py
        echo "‚úÖ IoT simulator syntax check passed"
    
    - name: Validate Firmware Structure
      run: |
        cd firmware
        echo "üìÅ Checking firmware structure..."
        
        if [ -f "src/main.cpp" ]; then
          echo "‚úÖ ESP32 firmware source found"
        else
          echo "‚ùå ESP32 firmware source missing"
        fi
        
        if [ -f "platformio.ini" ]; then
          echo "‚úÖ PlatformIO config found"
        else
          echo "‚ùå PlatformIO config missing"
        fi
        
        if [ -f "simulator.py" ]; then
          echo "‚úÖ Python simulator found"
        else
          echo "‚ùå Python simulator missing"
        fi
        
        echo "üîß Firmware validation completed"

  # Documentation Check
  docs-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check Project Documentation
      run: |
        echo "üìö Checking documentation..."
        
        # Check main README
        if [ -f "README.md" ]; then
          echo "‚úÖ Main README.md exists"
        else
          echo "‚ùå Main README.md missing"
          exit 1
        fi
        
        # Check component READMEs
        if [ -f "backend/README.md" ]; then
          echo "‚úÖ Backend README exists"
        fi
        
        if [ -f "webapp/README.md" ]; then
          echo "‚úÖ Frontend README exists"
        fi
        
        if [ -f "firmware/README.md" ]; then
          echo "‚úÖ Firmware README exists"
        fi
        
        if [ -f "DEVOPS.md" ]; then
          echo "‚úÖ DevOps documentation exists"
        fi
        
        echo "üìñ Documentation check completed"

  # Code Quality Summary
  quality-summary:
    name: Code Quality Summary
    runs-on: ubuntu-latest
    needs: [backend-check, frontend-check, mobile-check, firmware-check, docs-check]
    if: always()
    
    steps:
    - name: Check Results
      run: |
        echo "üìä Code Quality Summary"
        echo "======================"
        
        if [ "${{ needs.backend-check.result }}" == "success" ]; then
          echo "‚úÖ Backend: PASSED"
        else
          echo "‚ùå Backend: FAILED"
        fi
        
        if [ "${{ needs.frontend-check.result }}" == "success" ]; then
          echo "‚úÖ Frontend: PASSED"
        else
          echo "‚ùå Frontend: FAILED"
        fi
        
        if [ "${{ needs.mobile-check.result }}" == "success" ]; then
          echo "‚úÖ Mobile: PASSED"
        else
          echo "‚ùå Mobile: FAILED"
        fi
        
        if [ "${{ needs.firmware-check.result }}" == "success" ]; then
          echo "‚úÖ Firmware/IoT: PASSED"
        else
          echo "‚ùå Firmware/IoT: FAILED"
        fi
        
        if [ "${{ needs.docs-check.result }}" == "success" ]; then
          echo "‚úÖ Documentation: PASSED"
        else
          echo "‚ùå Documentation: FAILED"
        fi
        
        echo "======================"
        echo "üéâ CI/CD Pipeline completed!"

  # Notify Results (Optional)
  notify-results:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [quality-summary]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Success Notification
      if: needs.quality-summary.result == 'success'
      run: |
        echo "üöÄ All checks passed! Code is ready for deployment."
        echo "‚úÖ Backend: Ready"
        echo "‚úÖ Frontend: Ready" 
        echo "‚úÖ Mobile: Ready"
        echo "‚úÖ Firmware/IoT: Ready"
        echo "‚úÖ Documentation: Complete"
        
    - name: Failure Notification  
      if: needs.quality-summary.result != 'success'
      run: |
        echo "‚ùå Some checks failed. Please review the errors above."
        echo "üîß Check the logs for detailed error information."